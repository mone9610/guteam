name: CI/CD Rails
on: 
  pull_request:
    branches:
      - main
    types: [closed]
    # paths:
      # - 'docker-codes/api-server/**'
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    services:
      database:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: root
    container:
      image: ruby:2.6.8
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: bundle-${{ hashFiles('**/Gemfile.lock') }}
    - uses: actions/cache@v1
      with:
        path: node_modules
        key: yarn-${{ hashFiles('**/yarn.lock') }}
    - name: Setup node
      run: |
        cd ./docker-codes/api-server/guteam/
        apt-get update -qq && apt-get install -y nodejs mariadb-client
    - name: Create dotenv
      run: |
        cd ./docker-codes/api-server/guteam/
        touch .env
        echo "AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN_DEV }}" >> .env
        echo "AUTH0_IDENTIFIER=${{ secrets.AUTH0_IDENTIFIER_DEV }}" >> .env
        echo "AUTH0_USER=${{ secrets.AUTH0_USER_DEV }}" >> .env
        echo "AUTH0_PASSWORD=${{ secrets.AUTH0_PASSWORD_DEV }}" >> .env
        echo "AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID_DEV }}" >> .env
        echo "AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET_DEV }}" >> .env
        echo "AUTH0_CLIENT_AUDIENCE=${{ secrets.AUTH0_CLIENT_AUDIENCE_DEV }}" >> .env
        
    - name: Setup bundles
      run: |
        cd ./docker-codes/api-server/guteam/
        bundle install
    - name: Setup Database
      run: |
        cd ./docker-codes/api-server/guteam/
        bundle exec rails db:create
        bundle exec rails db:schema:load
        bundle exec rails db:migrate
    - name: Run tests
      run: |
        cd ./docker-codes/api-server/guteam/
        bundle exec rspec
        
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: production
    env:
      ECR_REPOSITORY: guteam-production          
      ECS_SERVICE: guteam-prod-ecs-service-rails 
      ECS_CLUSTER: guteam-prod
      ECS_TASK_DEFINITION: ./infrastructure/aws/ecs/guteam-prod-ecs-taskd-rails.json
      CONTAINER_NAME: guteam-prod-ecs-container-rails

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Create dotenv
      run: |
        cd ./docker-codes/api-server/guteam/
        touch .env
        echo "AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN_PROD }}" >> .env
        echo "AUTH0_IDENTIFIER=${{ secrets.AUTH0_IDENTIFIER_PROD }}" >> .env
        echo "AUTH0_USER=${{ secrets.AUTH0_USER_PROD }}" >> .env
        echo "AUTH0_PASSWORD=${{ secrets.AUTH0_PASSWORD_PROD }}" >> .env
        echo "AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID_PROD }}" >> .env
        echo "AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET_PROD }}" >> .env
        echo "AUTH0_CLIENT_AUDIENCE=${{ secrets.AUTH0_CLIENT_AUDIENCE_PROD }}" >> .env
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
        echo "GUTEAM_DATABASE_PASSWORD=${{ secrets.GUTEAM_DATABASE_PASSWORD }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd ./docker-codes/api-server
        docker build -t ${{secrets.ECR_REGISTRY}}/$ECR_REPOSITORY:$IMAGE_TAG  -f Dockerfile.prod .
        docker push ${{secrets.ECR_REGISTRY}}/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::${{secrets.ECR_REGISTRY}}/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Run migration
      uses: sinsoku/amazon-ecs-run-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        container: ${{ env.CONTAINER_NAME }}
        command: '["rails", "db:migrate"]'
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-stopped: true

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
